#include <iostream>
#include<string>
using namespace std;
int h(string a) {
    int h;
    if (a == "0000") {
        h = 0;
    }
    else if (a == "0001") {
        h = 1;
    }
    else if (a == "0010") {
        h = 2;
    }
    else if (a == "0011") {
        h = 3;
    }
    else if (a == "0100") {
        h = 4;
    }
    else if (a == "0101") {
        h = 5;
    }
    else if (a == "0110") {
        h = 6;
    }
    else if (a == "0111") {
        h = 7;
    }
    else if (a == "1000") {
        h = 8;
    }
    else if (a == "1001") {
        h = 9;
    }
    else if (a == "1010") {
        h = 10;
    }
    else if (a == "1011") {
        h = 11;
    }
    else if (a == "1100") {
        h = 12;
    }
    else if (a == "1101") {
        h = 13;
    }
    else if (a == "1110") {
        h = 14;
    }
    else if (a == "1111") {
        h = 15;
    }
    return h;
}//利用这个函数，把四位二进制字符串转化为一个十进制的整数
string g(int a) {
    string h = "0000";
    if (a == 0) {
        h = "0000";
    }
    else if (a == 1) {
        h = "0001";
    }
    else if (a == 2) {
        h = "0010";
    }
    else if (a == 3) {
        h = "0011";
    }
    else if (a == 4) {
        h = "0100";
    }
    else if (a == 5) {
        h = "0101";
    }
    else if (a == 6) {
        h = "0110";
    }
    else if (a == 7) {
        h = "0111";
    }
    else if (a == 8) {
        h = "1000";
    }
    else if (a == 9) {
        h = "1001";
    }
    else if (a == 10) {
        h = "1010";
    }
    else if (a == 11) {
        h = "1011";
    }
    else if (a == 12) {
        h = "1100";
    }
    else if (a == 13) {
        h = "1101";
    }
    else if (a == 14) {
        h = "1110";
    }
    else if (a == 15) {
        h = "1111";
    }
    return h;
}//利用这个函数，把一个十进制的整数转化为四位二进制字符串
char mod2(char a, char b) {
    if (a == b) {
        return '0';
    }
    else {
        return '1';
    }
}//对字符“0”“1”进行摩2加的函数
string M = "0011000000110001001100100011001100110100001101010011011000110111";
string L = "10101010101010101010101010101010";//先随便给L设置一个初始值,后面会被覆盖
string R = "10101010101010101010101010101010";//先随便给R设置一个初始值,后面会被覆盖
string Key = "0011000100110010001100110011010000110101001101100011011100111000";
string K[16] = { "101010101010101010101010101010101010101010101010",
                "101010101010101010101010101010101010101010101010",
                "101010101010101010101010101010101010101010101010",
                "101010101010101010101010101010101010101010101010",
                "101010101010101010101010101010101010101010101010",
                "101010101010101010101010101010101010101010101010",
                "101010101010101010101010101010101010101010101010",
                "101010101010101010101010101010101010101010101010",
                "101010101010101010101010101010101010101010101010",
                "101010101010101010101010101010101010101010101010",
                "101010101010101010101010101010101010101010101010",
                "101010101010101010101010101010101010101010101010",
                "101010101010101010101010101010101010101010101010",
                "101010101010101010101010101010101010101010101010",
                "101010101010101010101010101010101010101010101010",
                "101010101010101010101010101010101010101010101010" };//先随便给K设置一个初始值,后面会被覆盖
string KK[16] = { "101010101010101010101010101010101010101010101010",
                "101010101010101010101010101010101010101010101010",
                "101010101010101010101010101010101010101010101010",
                "101010101010101010101010101010101010101010101010",
                "101010101010101010101010101010101010101010101010",
                "101010101010101010101010101010101010101010101010",
                "101010101010101010101010101010101010101010101010",
                "101010101010101010101010101010101010101010101010",
                "101010101010101010101010101010101010101010101010",
                "101010101010101010101010101010101010101010101010",
                "101010101010101010101010101010101010101010101010",
                "101010101010101010101010101010101010101010101010",
                "101010101010101010101010101010101010101010101010",
                "101010101010101010101010101010101010101010101010",
                "101010101010101010101010101010101010101010101010",
                "101010101010101010101010101010101010101010101010" };//先随便给KK设置一个初始值,后面会被覆盖
int IP[64] =
{ 58,50,42,34,26,18,10,2,
 60,52,44,36,28,20,12,4,
 62,54,46,38,30,22,14,6,
 64,56,48,40,32,24,16,8,
 57,49,41,33,25,17,9,1,
 59,51,43,35,27,19,11,3,
 61,53,45,37,29,21,13,5,
 63,55,47,39,31,23,15,7
};//初始置换IP利用的数组
string ChushizhihuanIP(string a) {
    string b = a;
    for (int i = 0; i < 64; i++) {
        b[i] = a[IP[i] - 1];
    }
    return b;
}//初始置换IP函数表示
string Zhihuan1C(string a) {
    int c[28] =
    { 57,49,41,33,25,17,9,
     1,58,50,42,34,26,18,
     10,2,59,51,43,35,27,
     19,11,3,60,52,44,36 };
    string C0 = "1010101010101010101010101010";//先随便给C0设置一个初始值,后面会被覆盖
    for (int i = 0; i < 28; i++) {
        C0[i] = Key[c[i] - 1];
    }
    return C0;

}//产生子密钥过程中的置换选择1函数,产生C0
string Zhihuan1D(string a) {
    int d[28] = {
    63,55,47,39,31,23,15,
    7,62,54,46,38,30,22,
    14,6,61,53,45,37,29,
    21,13,5,28,20,12,4
    };
    string D0 = "1010101010101010101010101010";//先随便给D0设置一个初始值,后面会被覆盖
    for (int i = 0; i < 28; i++) {
        D0[i] = Key[d[i] - 1];
    }
    return D0;

}//产生子密钥过程中的置换选择1函数，产生D0
string Zhihuan2(string a) {
    int ZH2[48] = {
    14,17,11,24,1,5,
    3,28,15,6,21,10,
    23,19,12,4,26,8,
    16,7,27,20,13,2,
    41,52,31,37,47,55,
    30,40,51,45,33,48,
    44,49,39,56,34,53,
    46,42,50,36,29,32
    };//置换选择2
    string k = "101010101010101010101010101010101010101010101010";//先随便给k设置一个初始值,后面会被覆盖
    for (int i = 0; i < 48; i++) {
        k[i] = a[ZH2[i] - 1];
    }
    return k;
}//产生子密钥的置换选择2函数
int ZuoYi[16] = { 1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1 };//这个数组里储存有每次迭代的循环左移位数
string Kout(string& C, string& D, int t) {
    string c = "1010101010101010101010101010", d = "1010101010101010101010101010";
    for (int i = 0; i < 28 - t; i++) {
        c[i] = C[i + t];
        d[i] = D[i + t];
    }
    for (int i = 0; i < t; i++) {
        c[28 + i - t] = C[i];
        d[28 + i - t] = D[i];
    }
    C = c;
    D = d;
    string CD = C + D;//将C，D合并
    return Zhihuan2(CD);//通过置换选择2，返回值为子密钥
}//产生子密钥K的函数，包含C，D的循环左移,形参t代表循环左移的位数
string E(string A) {
    int e[48] =
    { 32,1,2,3,4,5,
     4,5,6,7,8,9,
     8,9,10,11,12,13,
     12,13,14,15,16,17,
     16,17,18,19,20,21,
     20,21,22,23,24,25,
     24,25,26,27,28,29,
     28,29,30,31,32,1
    };//借助这个数组做E变换，这个数组中的第k个数字代表着E变换的结果B的第k位等于A的第几位
    string B = "101010101010101010101010101010101010101010101010";//先随便给B设置一个初始值,后面会被覆盖
    for (int i = 0; i < 48; i++) {
        B[i] = A[e[i] - 1];
    }
    return B;
}//加密函数f中的选择运算E
int SBOX[8][4][16] = {
    {{14,4,13,1,2,15,11,8,3,10,6,12,5,9,0,7},
     {0,15,7,4,14,2,13,1,10,6,12,11,9,5,3,8},
     {4,1,14,8,13,6,2,11,15,12,9,7,3,10,5,0},
     {15,12,8,2,4,9,1,7,5,11,3,14,10,0,6,13}},
    {{15,1,8,14,6,11,3,4,9,7,2,13,12,0,5,10},
     {3,13,4,7,15,2,8,14,12,0,1,10,6,9,11,5},
     {0,14,7,11,10,4,13,1,5,8,12,6,9,3,2,15},
     {13,8,10,1,3,15,4,2,11,6,7,12,0,5,14,9}},
    {{10,0,9,14,6,3,15,5,1,13,12,7,11,4,2,8},
     {13,7,0,9,3,4,6,10,2,8,5,14,12,11,15,1},
     {13,6,4,9,8,15,3,0,11,1,2,12,5,10,14,7},
     {1,10,13,0,6,9,8,7,4,15,14,3,11,5,2,12}},
    {{7,13,14,3,0,6,9,10,1,2,8,5,11,12,4,15},
     {13,8,11,5,6,15,0,3,4,7,2,12,1,10,14,9},
     {10,6,9,0,12,11,7,13,15,1,3,14,5,2,8,4},
     {3,15,0,6,10,1,13,8,9,4,5,11,12,7,2,14}},
    {{2,12,4,1,7,10,11,6,8,5,3,15,13,0,14,9},
     {14,11,2,12,4,7,13,1,5,0,15,10,3,9,8,6},
     {4,2,1,11,10,13,7,8,15,9,12,5,6,3,0,14},
     {11,8,12,7,1,14,2,13,6,15,0,9,10,4,5,3}},
    {{12,1,10,15,9,2,6,8,0,13,3,4,14,7,5,11},
     {10,15,4,2,7,12,9,5,6,1,13,14,0,11,3,8},
     {9,14,15,5,2,8,12,3,7,0,4,10,1,13,11,6},
     {4,3,2,12,9,5,15,10,11,14,1,7,6,0,8,13}},
    {{4,11,2,14,15,0,8,13,3,12,9,7,5,10,6,1},
     {13,0,11,7,4,9,1,10,14,3,5,12,2,15,8,6},
     {1,4,11,13,12,3,7,14,10,15,6,8,0,5,9,2},
     {6,11,13,8,1,4,10,7,9,5,0,15,14,2,3,12}},
    {{13,2,8,4,6,15,11,1,10,9,3,14,5,0,12,7},
     {1,15,13,8,10,3,7,4,12,5,6,11,0,14,9,2},
     {7,11,4,1,9,12,14,2,0,6,10,13,15,3,5,8},
     {2,1,14,7,4,10,8,13,15,12,9,0,3,5,6,11}}
};//加密函数中要用到的S盒
string P(string U) {
    int p[32] = {
    16,7,20,21,
    29,12,28,17,
    1,15,23,26,
    5,18,31,10,
    2,8,24,14,
    32,27,3,9,
    19,13,30,6,
    22,11,4,25
    };
    string u = U;
    for (int i = 0; i < 32; i++) {
        u[i] = U[p[i] - 1];
    }
    return u;
}//加密函数中要用到的置换运算P
string f(string r, string k) {
    string B = E(r);//对输入的r进行选择运算E
    string C = B;//C为B和子密钥摩2相加的结果
    for (int i = 0; i < 48; i++) {
        C[i] = mod2(B[i], k[i]);//摩2相加
    };
    string u[8] = { "1000","1000", "1000", "1000", "1000", "1000", "1000", "1000" };//先随便给u设置一个初始值,后面会被覆盖

    for (int i = 0; i < 8; i++) {
        string t = "00";
        t[0] = C[0 + i * 6];
        t[1] = C[5 + i * 6];
        string tt = "1010";//先随便给tt设置一个初始值,后面会被覆盖
        for (int k = 1; k < 6; k++) {
            tt[k - 1] = C[k + i * 6];
        }
        int s = h(tt);
        if (t == "00") {
            u[i] = g(SBOX[i][0][s]);
        }
        else if (t == "01") {
            u[i] = g(SBOX[i][1][s]);
        }
        else if (t == "10") {
            u[i] = g(SBOX[i][2][s]);
        }
        else if (t == "11") {
            u[i] = g(SBOX[i][3][s]);
        }
    }
    string U = u[0] + u[1] + u[2] + u[3] + u[4] + u[5] + u[6] + u[7];//U为经过S盒处理后得到的比特串
    return P(U);

}//加密函数f
string IPni(string S) {
    int IPni[64] = {
    40,8,48,16,56,24,64,32,
    39,7,47,15,55,23,63,31,
    38,6,46,14,54,22,62,30,
    37,5,45,13,53,21,61,29,
    36,4,44,12,52,20,60,28,
    35,3,43,11,51,19,59,27,
    34,2,42,10,50,18,58,26,
    33,1,41,9,49,17,57,25
    };//逆初始置换利用的矩阵
    string s = "1010101010101010101010101010101010101010101010101010101010101010";//先随便给s设置一个初始值,后面会被覆盖
    for (int i = 0; i < 64; i++) {
        s[i] = S[IPni[i] - 1];
    }
    return s;
}//进行逆初始置换IP的函数
string m(string m) {
    m = ChushizhihuanIP(m);
    for (int i = 0; i < 32; i++) {
        L[i] = m[i];
    }
    for (int i = 0; i < 32; i++) {
        R[i] = m[32 + i];
    }

    string C = Zhihuan1C(Key);//由密钥Key经过置换选择1得到C0；
    string D = Zhihuan1D(Key);//由密钥Key经过置换选择1得到D0；
    for (int i = 0; i <= 15; i++) {
        K[i] = Kout(C, D, ZuoYi[i]);
    }
    for (int i = 0; i < 16; i++) {
        string r = R;
        string rr = f(R, K[i]);
        for (int k = 0; k < 32; k++) {
            R[k] = mod2(L[k], rr[k]);
        }
        L = r;

    }
    string RL = R + L;
    string S = IPni(RL);//S是密文
    return S;
}//对原文进行加密的加密函数
string J(string s) {
    s = ChushizhihuanIP(s);
    for (int i = 0; i < 32; i++) {
        L[i] = s[i];
    }
    for (int i = 0; i < 32; i++) {
        R[i] = s[32 + i];
    }
    for (int i = 0; i < 16; i++) {
        string r = R;
        string rr = f(R, KK[i]);
        for (int k = 0; k < 32; k++) {
            R[k] = mod2(L[k], rr[k]);
        }
        L = r;
    }
    string RL = R + L;
    string m = IPni(RL);//m是解密后得到的明文
    return m;
}//对密文进行解密的解密函数
int main()
{
    cout << "明文： " << M << endl;
    string S = m(M);
    for (int i = 0; i < 16; i++) {
        KK[i] = K[15 - i];
    }//KK为子密钥组颠倒顺序后得到的字符串组，作为解密过程中的子密钥
    cout << "密文： " << S << endl;
    cout << "解密： " << J(S);
    return 0;

}
